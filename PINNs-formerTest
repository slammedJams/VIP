{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aa49a204",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:25.448536Z",
     "iopub.status.busy": "2024-11-01T23:20:25.447700Z",
     "iopub.status.idle": "2024-11-01T23:20:28.653348Z",
     "shell.execute_reply": "2024-11-01T23:20:28.652575Z"
    },
    "papermill": {
     "duration": 3.214024,
     "end_time": "2024-11-01T23:20:28.655591",
     "exception": false,
     "start_time": "2024-11-01T23:20:25.441567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from notebookde93c438f9 import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fa4b20ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:28.665712Z",
     "iopub.status.busy": "2024-11-01T23:20:28.665268Z",
     "iopub.status.idle": "2024-11-01T23:20:28.688180Z",
     "shell.execute_reply": "2024-11-01T23:20:28.687248Z"
    },
    "papermill": {
     "duration": 0.03021,
     "end_time": "2024-11-01T23:20:28.690260",
     "exception": false,
     "start_time": "2024-11-01T23:20:28.660050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "# @article{zhao2023pinnsformer,\n",
    "#   title={PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks},\n",
    "#   author={Zhao, Leo Zhiyuan and Ding, Xueying and Prakash, B Aditya},\n",
    "#   journal={arXiv preprint arXiv:2307.11833},\n",
    "#   year={2023}\n",
    "# }\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "52aa6d52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:28.699446Z",
     "iopub.status.busy": "2024-11-01T23:20:28.699123Z",
     "iopub.status.idle": "2024-11-01T23:20:28.703245Z",
     "shell.execute_reply": "2024-11-01T23:20:28.702438Z"
    },
    "papermill": {
     "duration": 0.010809,
     "end_time": "2024-11-01T23:20:28.705123",
     "exception": false,
     "start_time": "2024-11-01T23:20:28.694314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2e6c4693",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:28.715160Z",
     "iopub.status.busy": "2024-11-01T23:20:28.714896Z",
     "iopub.status.idle": "2024-11-01T23:20:28.785107Z",
     "shell.execute_reply": "2024-11-01T23:20:28.783943Z"
    },
    "papermill": {
     "duration": 0.077655,
     "end_time": "2024-11-01T23:20:28.787062",
     "exception": false,
     "start_time": "2024-11-01T23:20:28.709407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cc490a06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:28.796695Z",
     "iopub.status.busy": "2024-11-01T23:20:28.795896Z",
     "iopub.status.idle": "2024-11-01T23:20:28.996127Z",
     "shell.execute_reply": "2024-11-01T23:20:28.995311Z"
    },
    "papermill": {
     "duration": 0.20712,
     "end_time": "2024-11-01T23:20:28.998174",
     "exception": false,
     "start_time": "2024-11-01T23:20:28.791054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.   0.02 0.04 ... 0.96 0.98 1.  ]\n"
     ]
    }
   ],
   "source": [
    "L=1\n",
    "res, b_left, b_right, b_upper, b_lower = get_data([0, L], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "def u_init(x):\n",
    "   \n",
    "    return np.sin(n * np.pi * x / L)\n",
    "print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f8c0d4b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:29.008122Z",
     "iopub.status.busy": "2024-11-01T23:20:29.007594Z",
     "iopub.status.idle": "2024-11-01T23:20:30.353690Z",
     "shell.execute_reply": "2024-11-01T23:20:30.352444Z"
    },
    "papermill": {
     "duration": 1.35381,
     "end_time": "2024-11-01T23:20:30.356373",
     "exception": false,
     "start_time": "2024-11-01T23:20:29.002563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=3e-5)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "aa03ae50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:20:30.368030Z",
     "iopub.status.busy": "2024-11-01T23:20:30.367602Z",
     "iopub.status.idle": "2024-11-01T23:24:33.915940Z",
     "shell.execute_reply": "2024-11-01T23:24:33.914957Z"
    },
    "papermill": {
     "duration": 243.556271,
     "end_time": "2024-11-01T23:24:33.918643",
     "exception": false,
     "start_time": "2024-11-01T23:20:30.362372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/250 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 40%|████      | 100/250 [03:37<00:26,  5.67it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 80%|████████  | 200/250 [03:54<00:08,  5.56it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 250/250 [04:03<00:00,  1.03it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "t_ic = torch.zeros_like(x_lower)\n",
    "for i in tqdm(range(250)):\n",
    "    k+=1\n",
    "    if k == 100:\n",
    "            print(\"progress\")\n",
    "            k=0\n",
    "    def closure():\n",
    "        \n",
    "        pred_res = model(x_res, t_res)\n",
    "        pred_left = model(x_left, t_left) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "        pred_right = model(x_right, t_right) # t_right is 1\n",
    "        #print(pred_res)\n",
    "        pred_ic = model(x_right,t_ic )\n",
    "        pred_upper = model(x_upper, t_upper) #  All spatial points at the final time step (x=1).\n",
    "        pred_lower = model(x_lower, t_lower) #  All spatial points at the initial time step (x=0).\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "       \n",
    "        alpha =a   # thermal diffusivity (can be modified)\n",
    "        #1. PDE LOSS eesidual\n",
    "        loss_res =torch.mean((alpha * u_xx - u_t )**2 )\n",
    "\n",
    "\n",
    "        #2. Loss for initial condition\n",
    "\n",
    "        loss_ic = torch.mean((pred_ic- torch.sin(n * torch.pi * x_right / L))**2)\n",
    "        \n",
    "        \n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        loss_bc_1 =loss_bc = torch.mean((pred_upper) ** 2) + torch.mean((pred_lower) ** 2)\n",
    "        #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "        loss_bc = loss_bc_1\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 2*loss_res + loss_ic + loss_bc\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bb140b5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:24:33.968050Z",
     "iopub.status.busy": "2024-11-01T23:24:33.967709Z",
     "iopub.status.idle": "2024-11-01T23:24:33.972520Z",
     "shell.execute_reply": "2024-11-01T23:24:33.971644Z"
    },
    "papermill": {
     "duration": 0.031572,
     "end_time": "2024-11-01T23:24:33.974613",
     "exception": false,
     "start_time": "2024-11-01T23:24:33.943041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 1383\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c597a9d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:24:34.023256Z",
     "iopub.status.busy": "2024-11-01T23:24:34.022724Z",
     "iopub.status.idle": "2024-11-01T23:24:34.039010Z",
     "shell.execute_reply": "2024-11-01T23:24:34.038196Z"
    },
    "papermill": {
     "duration": 0.042571,
     "end_time": "2024-11-01T23:24:34.040873",
     "exception": false,
     "start_time": "2024-11-01T23:24:33.998302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000001, Loss_IC: 0.000000, loss_bc: 0.000000\n",
      "Train Loss: 0.000001\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e7bcd92f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:24:34.088855Z",
     "iopub.status.busy": "2024-11-01T23:24:34.088572Z",
     "iopub.status.idle": "2024-11-01T23:24:34.460296Z",
     "shell.execute_reply": "2024-11-01T23:24:34.459444Z"
    },
    "papermill": {
     "duration": 0.39841,
     "end_time": "2024-11-01T23:24:34.462677",
     "exception": false,
     "start_time": "2024-11-01T23:24:34.064267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0bdc1ed2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T23:24:34.513741Z",
     "iopub.status.busy": "2024-11-01T23:24:34.513366Z",
     "iopub.status.idle": "2024-11-01T23:24:35.637093Z",
     "shell.execute_reply": "2024-11-01T23:24:35.636173Z"
    },
    "papermill": {
     "duration": 1.151918,
     "end_time": "2024-11-01T23:24:35.639553",
     "exception": false,
     "start_time": "2024-11-01T23:24:34.487635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Relative L1 error: 0.001453\n",
      "Relative L2 error: 0.001048\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEiCAYAAADwEwVaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACOeElEQVR4nO29e7wWVb0//l7z7BuKG1EEFLeiVGpe4ARCaIZ2SPplFKeXiZcvIEmmoql0UfKyIRPMo0Yp6tHyUmKYHjVTDqYomUmaKEWJlgJiJAiZgCjsvWc+vz9mrTVrrVlze+6bPe/X69l7Zt3neWben9taaxgREXLkyJEjR4+DU+sB5MiRI0eO2iAXADly5MjRQ5ELgBw5cuToocgFQI4cOXL0UOQCIEeOHDl6KHIBkCNHjhw9FLkAyJEjR44eilwA5MiRI0cPRS4AcuTIkaOHIhcAKXHXXXeBMYa1a9fWdZsqZs2aBcZY2dt94YUX0NTUhDfffLPsbav417/+hd133x2LFi2qaD85dl0cf/zxOP7442s9jLpFtxQAN998MxhjGDVqVK2Hkgpz5szBww8/XOthlA2XXXYZTjvtNBx44IFlaW/RokWYNWtWKH3vvffGtGnTcMUVV5SlHxO33HILvvKVr+CAAw4AYwxnnnmmtZwQpOKz22674YADDsD48eNx5513YufOnan6EwL/xRdftOYff/zxOOKII4q9nFSI+q6jcPzxx2vXrn4OPfTQyg00A1555RXMmjWrYorUroyGWg+gGCxYsACDBw/GCy+8gNdffx0f+chHaj2kWMyZMwcnn3wyJkyYoKVPmjQJp556Kpqbm2szsCKwYsUKPPnkk3juuefK1uaiRYswf/58KzGdc845+PGPf4ynnnoKn/nMZ8rWJwD84Ac/wLZt2zBy5Ei8/fbbieVvueUW9O7dGzt37sT69evx+OOP46tf/SrmzZuHRx99FG1tbWUdXyUQ911HYf/998fcuXND6X369CnjyIrHK6+8gtmzZ+P444/H4MGDtbzf/OY3tRlUN0G3EwBr1qzBc889hwcffBBf//rXsWDBArS3t9d6WEWhUCigUCjUehiZcOedd+KAAw7AJz/5yar0d9hhh+GII47AXXfdVXYB8Nvf/lZq/717904sf/LJJ6Nfv37y/Morr8SCBQswefJkfOUrX8Ef/vCHso6vXtCnTx/8v//3/2o9jKLQ1NRU6yHUNbqdC2jBggXo27cvTjrpJJx88slYsGBBqMzatWvBGMN1112H2267DUOGDEFzczOOPvpo/PGPf9TK/vnPf8aZZ56Jgw8+GC0tLRg4cCC++tWv4l//+lfsOKZMmYJ+/fqhs7MzlHfiiSfikEMOAQAwxrB9+3bcfffd0nQWroaoGMD//d//YcyYMdhjjz3Q2tqKo48+Gvfee6/M/93vfiddF83NzWhra8PFF1+MDz/8MM1XGMLgwYOt7g+b//Thhx/GZz7zGS228NRTT8FxHFx55ZVa2XvvvReMMdxyyy2RfZ955pmYP38+AGjuBRWf/exn8etf/xrl3rj2wAMPLDlGcsYZZ2DatGl4/vnn8cQTT5RpZDruueceDB8+HL169cJee+2FU089FW+99ZZWJs09kea7LgXPPvssjj76aLS0tGDIkCH4n//5n1AcSjybd911V6g+Y0yzTN58802cd955OOSQQ9CrVy/svffe+MpXvqI9L3fddRe+8pWvAABOOOEEeU1Lly4FYL+H33nnHZx11lkYMGAAWlpaMHToUNx9991amSwc0p3R7SyABQsW4Mtf/jKamppw2mmn4ZZbbsEf//hHHH300aGy9957L7Zt24avf/3rYIzh2muvxZe//GWsXr0ajY2NAIAnnngCq1evxtSpUzFw4ED89a9/xW233Ya//vWv+MMf/hD5gEyaNAk/+9nP8Pjjj+MLX/iCTN+wYQOeeuopaZX8/Oc/x7Rp0zBy5EicffbZAIAhQ4ZEXt9dd92Fr371qzj88MMxc+ZM7Lnnnnj55ZexePFinH766QCA+++/Hx988AHOPfdc7L333njhhRdw44034h//+Afuv//+4r7YFFi/fj3WrVuHT3ziE1r6Zz7zGZx33nmYO3cuJkyYgE984hN4++23ccEFF2Ds2LE455xzItv8+te/jn/+85944okn8POf/9xaZvjw4fjhD3+Iv/71rxX3kReDSZMm4bbbbsNvfvMbfPazn00sv2XLFmzevDmUblMmrr76alxxxRU45ZRTMG3aNGzatAk33ngjPv3pT+Pll1/GnnvuCSDdPZHmu7bBdV3reHv16oXdd98dALBy5UqceOKJ2GeffTBr1ix0dXWhvb0dAwYMSN2PiT/+8Y947rnncOqpp2L//ffH2rVrccstt+D444/HK6+8gt122w2f/vSn8Y1vfAM//vGP8d3vfheHHXYYAMj/Jj788EMcf/zxeP3113H++efjoIMOwv33348zzzwT7733Hi688EKtfBoO6dagboQXX3yRANATTzxBRESe59H+++9PF154oVZuzZo1BID23ntvevfdd2X6r371KwJAv/71r2XaBx98EOrnF7/4BQGgZ555RqbdeeedBIDWrFlDRESu69L+++9PEydO1OrecMMNxBij1atXy7Tdd9+dpkyZEurHbPO9996jPfbYg0aNGkUffvihVtbzvNgxz507lxhj9Oabb8q09vZ2SvMTH3jggdbxjRkzhsaMGSPPn3zyydD3J7B9+3b6yEc+Qocffjjt2LGDTjrpJGptbdXGE4Xp06fHjvO5554jAHTfffcltlUson4jouB73LRpkzX/3//+NwGg//qv/4rtQ/zecZ/DDz9cll+7di0VCgW6+uqrtXZWrlxJDQ0NWnraeyLpuzYxZsyYyLF+/etfl+UmTJhALS0tWl+vvPIKFQoFrT/xbN55552hvgBQe3t77DUtW7aMANDPfvYzmXb//fcTAHr66aet41fv4Xnz5hEAuueee2RaR0cHjR49mnr37k1bt27VxpmGQ7ozupULaMGCBRgwYABOOOEEAL7JOHHiRCxcuBCu64bKT5w4EX379pXnxx13HABg9erVMq1Xr17yeMeOHdi8ebP0b7/00kuRY3EcB2eccQYeeeQRbNu2TRvjMcccg4MOOijz9T3xxBPYtm0bLr30UrS0tGh5qiWijnn79u3YvHkzjjnmGBARXn755cz9poVwi6nfqcBuu+2Gu+66C6tWrcKnP/1pPPbYY/jhD3+IAw44oOR+RX82LbQeIOIH6n0Qh/nz5+OJJ54IfY466iit3IMPPgjP83DKKadg8+bN8jNw4EB89KMfxdNPPy3LVvKeGDx4sHW8F110EQDfQnj88ccxYcIE7fc+7LDDMG7cuKL7Va+ps7MT//rXv/CRj3wEe+65Z+yzGYdFixZh4MCBOO2002RaY2MjvvGNb+D999/Hb3/7W618Gg7pzug2LiDXdbFw4UKccMIJWLNmjUwfNWoUrr/+eixZsgQnnniiVsckH/FD/vvf/5Zp7777LmbPno2FCxfinXfe0cpv2bIldkyTJ0/GD37wAzz00EOYPHkyXnvtNSxfvhy33nprUdf4xhtvAECim2PdunW48sor8cgjj2jXkmbM5QBF+OKPPfZYnHvuuZg/fz7GjRuHr371q2XtL85f7bouNm3apKXttddeVQkCvv/++wCAPfbYI1X5kSNHYsSIEaH0vn37akLu73//O4gIH/3oR63tqC6ISt4Tu+++O8aOHRuZv2nTJnz44YfWcR5yyCFFr+P48MMPMXfuXNx5551Yv369dt8Ve01vvvkmPvrRj8JxdN1XuIzMtS1pOKQ7o9sIgKeeegpvv/02Fi5ciIULF4byFyxYEBIAUTNs1BvplFNOwXPPPYdvf/vbGDZsGHr37g3P8/C5z30OnufFjunjH/84hg8fjnvuuQeTJ0/GPffcg6amJpxyyilFXGE6uK6Lz372s3j33XdxySWX4NBDD8Xuu++O9evX48wzz0wcsw1RxOq6rvYd7r333gCib/6dO3fK4Nsbb7yBDz74ALvttlvm8ZgQ/akzcEy89dZbIavr6aefrsoioL/85S8AUPbpyJ7ngTGG//u//7Pey8LyqMQ9USnE3WsmLrjgAtx555246KKLMHr0aPTp0weMMZx66qlVu6Y0HNKd0W0EwIIFC9C/f385i0HFgw8+iIceegi33nqrZjYm4d///jeWLFmC2bNnazNY/v73v6duY/LkyZgxYwbefvtt3HvvvTjppJNCLpK0My1EcPgvf/lLJJmsXLkSf/vb33D33Xdj8uTJMr2UGSh9+/bFe++9F0p/8803cfDBB8tzsfBHtcBUtLe3Y9WqVbjuuutwySWX4NJLL8WPf/zjxP6Tvh/RX1RgDwAGDhwY+g6GDh2a2Hc5IAKqpbg7bBgyZAiICAcddBA+9rGPRZbLck9UYmX4Pvvsg169elmfm9dee007F8+Geb/ZVpU/8MADmDJlCq6//nqZtmPHjlDdLNd04IEH4s9//jM8z9OsgFdffVXm9yR0ixjAhx9+iAcffBBf+MIXcPLJJ4c+559/PrZt24ZHHnkkU7tCupvSfN68eanbOO2008AYw4UXXojVq1db50vvvvvuVoI1ceKJJ2KPPfbA3LlzsWPHDi1PjNE2ZiLCj370o9RjNjFkyBD84Q9/QEdHh0x79NFHQ1MNBw0ahLa2NutK1ueffx7XXXcdLrroInzzm9/Et7/9bdx0000hn6oNYiZJ1He0fPly9OnTB4cffnhkGy0tLRg7dqz2scUqyo17770XP/nJTzB69Gj853/+Z1nb/vKXv4xCoYDZs2eH7lEikjGZLPdE0nddDAqFAsaNG4eHH34Y69atk+mrVq3C448/rpVtbW1Fv3798Mwzz2jpN998s7Vd87pvvPHGkLWQ5Zo+//nPY8OGDbjvvvtkWldXF2688Ub07t0bY8aMSWxjV0K3sABEoPWLX/yiNf+Tn/wk9tlnHyxYsAATJ05M3W5rays+/elP49prr0VnZycGDRqE3/zmN5Earg377LMPPve5z+H+++/HnnvuiZNOOilUZvjw4XjyySdxww03YL/99sNBBx1k3caitbUVP/zhDzFt2jQcffTROP3009G3b1/86U9/wgcffIC7774bhx56KIYMGYJvfetbWL9+PVpbW/G///u/Jfkkp02bhgceeACf+9zncMopp+CNN97APffcY52u+qUvfQkPPfQQiEhqXjt27MCUKVPw0Y9+FFdffTUAYPbs2fj1r3+NqVOnYuXKlfIhnTVrFmbPnq25Z4YPHw4A+MY3voFx48ahUCjg1FNPlX0+8cQTGD9+fNm111//+tf405/+BMAPMv75z3/G97//fQDAF7/4xVBQ9oEHHkDv3r3R0dEhVwL//ve/x9ChQysy/XbIkCH4/ve/j5kzZ2Lt2rWYMGEC9thjD6xZswYPPfQQzj77bHzrW9/KdE8kfdc2bNmyBffcc481Tyg8s2fPxuLFi3HcccfhvPPOk6R6+OGH489//rNWZ9q0abjmmmswbdo0jBgxAs888wz+9re/hdr+whe+gJ///Ofo06cPPv7xj2PZsmV48sknpStSYNiwYSgUCvjBD36ALVu2oLm5GZ/5zGfQv3//UJtnn302/ud//gdnnnkmli9fjsGDB+OBBx7A73//e8ybNy91HGeXQZVnHRWF8ePHU0tLC23fvj2yzJlnnkmNjY20efNmOYXrv//7v0PlYEw1+8c//kH/9V//RXvuuSf16dOHvvKVr9A///nPUDlzyqaKX/7ylwSAzj77bOvYXn31Vfr0pz9NvXr1IgByumFUm4888ggdc8wx1KtXL2ptbaWRI0fSL37xC5n/yiuv0NixY6l3797Ur18/+trXvkZ/+tOfQtPr0k4DJSK6/vrradCgQdTc3EzHHnssvfjii6EpdEREL730EgGg3/3udzLt4osvpkKhQM8//7xW9sUXX6SGhgY699xzZdo3v/lNYozRqlWrZFpXVxddcMEFtM8++xBjTBvzqlWrCAA9+eSTqa4jC6ZMmRI5xdH2PYpPS0sL7b///vSFL3yB7rjjDtqxY0eq/sTv/cc//tGaP2bMGG0aqMD//u//0qc+9Snafffdaffdd6dDDz2Upk+fTq+99posk/aeiPuuo8YU9R2ZdX/729/S8OHDqampiQ4++GC69dZbrffgBx98QGeddRb16dOH9thjDzrllFPonXfeCT1z//73v2nq1KnUr18/6t27N40bN45effVV67Tl22+/nQ4++GA57VRMCbXdwxs3bpTtNjU10ZFHHhmalpqFQ7ozGNEuEs2oIX71q19hwoQJeOaZZ+Q0sV0Z//mf/4n99tsv02IigZEjR+LAAw9MrTFfdNFFeOaZZ7B8+fKK+K9zVBbC4stppj7RLWIA9Y7bb78dBx98MD71qU/VeihVwZw5c3Dfffdl3g5669at+NOf/oTvfe97qcr/61//wk9+8hN8//vfz8k/R44KoFvEAOoVCxcuxJ///Gc89thj+NGPftRjSGrUqFFawDgtWltbU2+dDPjTTsUc+xw5cpQfuQAoAaeddhp69+6Ns846C+edd16th5MjR44cmVAXLqD58+dj8ODBaGlpwahRo/DCCy/Elr///vtx6KGHoqWlBUceeWTN3hhFRNi2bRt+8pOfoKEhl6U5cpiYNWtW7v9PgWeeeQbjx4/HfvvtB8ZYqhdILV26FJ/4xCfQ3NyMj3zkI9YdVpNQcwFw3333YcaMGWhvb8dLL72EoUOHYty4caFtGQSee+45nHbaaTjrrLPw8ssvY8KECZgwYYJcjZkjR44c3Q3bt2/H0KFDrQtdbVizZg1OOukknHDCCVixYgUuuugiTJs2LbTuIgk1nwU0atQoHH300bjpppsA+Mvf29racMEFF+DSSy8NlZ84cSK2b9+ORx99VKZ98pOfxLBhw4regydHjhw56gWMMTz00EOhNwiquOSSS/DYY49piu+pp56K9957D4sXL07dV039Fh0dHVi+fDlmzpwp0xzHwdixY7Fs2TJrnWXLlmHGjBlamliFaMPOnTu1wKPneXj33Xex995795igbY4cOQKX7X777RfaDC4tduzYkWoCBCkLJQWam5vL9vrXZcuWhTboGzdunNyhNS1qKgA2b94M13VDL40YMGCA3JvD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orT3UtxAQHohEGMJ+EVjXEK28UQJAts8/ShSTmMVmHlR+SIrznVULMpECqkJP02fWa2AYvcNKoX8swR80/rms7p/6kH7F6ijoZSCcuydWBLmz5+PwYMHo6WlBaNGjcILL7wQW/69997D9OnTse+++6K5uRkf+9jHsGjRoiqNtgQoN3Vq32qiT9coG6dpEYUfMvVtY7Yy4twcr/qxlY1qw8yLyreVA+RLTerhE0La64jLj0pP851H/YZpfmdY7sks5F+M66dSPv4qBIbFVhBxn2KQlQsFFi5cCMYYJkyYkLnPmgqA++67DzNmzEB7ezteeuklDB06FOPGjcM777xjLd/R0YHPfvazWLt2LR544AG89tpruP322zFo0KDyDSrqBirmxkqrbaY0nzO1Cf+BswqC5Irp0oDosUeQuJaXRjNOW7bayDK2pHJxeaXOEkooE7pHsi7SynLvpm0zVR1Foaq2ZUApPhmRlQsF1q5di29961s47rjjsneKGguAG264AV/72tcwdepUfPzjH8ett96K3XbbDXfccYe1/B133IF3330XDz/8MI499lgMHjwYY8aMwdChQysyvtgbK61mE5EX++DFaFGhNsmLtQRC4xP102qJSRaB2qel76ItABvitOxqf7KML8v3kfa7jEsrRusXfWsFjHsrTXlLXvhej2szpaVcQ4gYQNwnK7JyIeC/iOuMM87A7NmzcfDBBxd1LTUTAB0dHVi+fDnGjh0bDMZxMHbsWCxbtsxa55FHHsHo0aMxffp0DBgwAEcccQTmzJkD13WrM+hifJvl6iuLO8hSPrU1YBt7HJHZYCOvtHXNMvWo/QsUYwVEIe47y/L9R/1+2qnlXogjc0sbieWLQdrnptbv+6UUnwwohgsB4Hvf+x769++Ps846K+sVSNQsCLx582a4rosBAwZo6QMGDMCrr75qrbN69Wo89dRTOOOMM7Bo0SK8/vrrOO+889DZ2Yn29nZrnZ07d2Lnzp3yfOvWreW7CAWpZwMZAdjQrCAgetfQpNlBtuCw2h4CrSpyppAYo4AtWKyWN4khbi+ftLN6KrXbZ9IK5HIgbbvlnBoaRZxJGr9tHNbdNYvT/K19piT5enjxSxTSbgdtck1zczOam5tD5YvhwmeffRY//elPsWLFikxjN1HzIHAWeJ6H/v3747bbbsPw4cMxceJEXHbZZbj1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pkbWa5k+fTp95jOf0dJmzJhBxx57bEXHmRVpBMB3vvMdOvzww7W0iRMn0rhx4yo4svrCLuUCquW2quVGMddi4oMPPkBnZ2fRe5+UC8Vey/e+9z30798fZ511VjWGmQrFXMsjjzyC0aNHY/r06RgwYACOOOIIzJkzB65b23fHFnMtxxxzDJYvXy7dRKtXr8aiRYvw+c9/vipjLifq9dmvJrrVXkBJqOW2quVGMddi4pJLLsF+++0XusmrjWKu5dlnn8VPf/pTuU1IvaCYa1m9ejWeeuopnHHGGVi0aBFef/11nHfeeejs7ER7e3s1hm1FMddy+umnY/PmzfjUpz4FIkJXVxfOOeccfPe7363GkMuKYraX39WwS1kAOQJcc801WLhwIR566KGyb15VaWzbtg2TJk3C7bffjn79+tV6OCXD8zz0798ft912G4YPH46JEyfisssuy/TmpnrB0qVLMWfOHNx888146aWX8OCDD+Kxxx7DVVddVeuh5SgCu5QFUMttVcuNYq5F4LrrrsM111yDJ598EkcddVQlh5kKWa/ljTfewNq1azF+/HiZ5nn+Cw8aGhrw2muvYciQIZUddASK+V323XdfNDY2olAoyLTDDjsMGzZsQEdHB5qamio65igUcy1XXHEFJk2ahGnTpgEAjjzySGzfvh1nn302LrvsspJ22qw2itlefldD9/m1UkDdVlVAbKsatU2q2FZVRTHbqpYbxVwLAFx77bW46qqrsHjxYowYMaIaQ01E1ms59NBDsXLlSrlT7IoVK/DFL34RJ5xwAlasWBF60UY1Uczvcuyxx+L111+XQgwA/va3v2HfffetGfkDxV3LBx98ECJ5Idiom+0qU6/PflVR6yh0ubFw4UJqbm6mu+66i1555RU6++yzac8996QNGzYQEdGkSZPo0ksvleV///vfU0NDA1133XW0atUqam9vr6tpoFmu5ZprrqGmpiZ64IEH6O2335afbdu21eoSJLJei4l6mgWU9VrWrVtHe+yxB51//vn02muv0aOPPkr9+/en73//+7W6BIms19Le3k577LEH/eIXv6DVq1fTb37zGxoyZAidcsoptboEiW3bttHLL79ML7/8MgGgG264gV5++WV68803iYjo0ksvpUmTJsnyYhrot7/9bVq1ahXNnz8/nwa6K6AW26pWClmu5cADD7Rur93e3l79gVuQ9XdRUU8CgCj7tTz33HM0atQoam5upoMPPpiuvvpq6urqqvKo7chyLZ2dnTRr1iwaMmQItbS0UFtbG5133nn073//u/oDN1CL7eW7O/LdQHPkyJGjh2KXigHkyJEjR470yAVAjhw5cvRQ5AIgR44cOXoocgGQI0eOHD0UuQDIkSNHjh6KXADkyJEjRw9FLgBy5MiRo4ciFwA5cuTI0UORC4AcOXLk6KHIBUCOHDly9FDkAiBHjhw5eihyAZBjl8emTZswcOBAzJkzR6Y999xzaGpqCm0HnCNHT0K+GVyOHoFFixZhwoQJeO6553DIIYdg2LBh+NKXvoQbbrih1kPLkaNmyAVAjh6D6dOn48knn8SIESOwcuVK/PGPf0Rzc3Oth5UjR82QC4AcPQYffvghjjjiCLz11ltYvnw5jjzyyFoPKUeOmiKPAeToMXjjjTfwz3/+E57nYe3atbUeTo4cNUduAeToEejo6MDIkSMxbNgwHHLIIZg3bx5WrlyJ/v3713poOXLUDLkAyNEj8O1vfxsPPPAA/vSnP6F3794YM2YM+vTpg0cffbTWQ8uRo2bIXUA5dnksXboU8+bNw89//nO0trbCcRz8/Oc/x+9+9zvccssttR5ejhw1Q24B5MiRI0cPRW4B5MiRI0cPRS4AcuTIkaOHIhcAOXLkyNFDkQuAHDly5OihyAVAjhw5cvRQ5AIgR44cOXoocgGQI0eOHD0UuQDIkSNHjh6KXADkyJEjRw9FLgBy5MiRo4ciFwA5cuTI0UORC4AcOXLk6KH4/wFuQPSPHfOBAAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#Visualization for 1D heat equation\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "#Final Desired Equation\n",
    "def u_ana(x, t, alpha=0.4, L=1, n=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L)\n",
    "    #return np.exp(-n**2 * np.pi**2 * alpha * t) * np.sin(n * np.pi * x / L)\n",
    "\n",
    "#Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1]).reshape(101, 101)\n",
    "\n",
    "#Compute relative errors (L1 and L2)\n",
    "rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "print('Relative L1 error: {:4f}'.format(rl1))\n",
    "print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "#Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, L, 1, 0], aspect='auto')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('t')\n",
    "plt.title('Predicted u(x,t) - 1D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "#Visualization of analytical solution u_ana(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u, extent=[0, L, 1, 0], aspect='auto')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('t')\n",
    "plt.title('Analytical u(x,t) - 1D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_analytical.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 204744045,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 254.158343,
   "end_time": "2024-11-01T23:24:36.887661",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-01T23:20:22.729318",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
